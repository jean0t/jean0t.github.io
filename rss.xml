<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel> <title>jean0t Blog</title> <link></link> <atom:link href="/rss.xml" rel="self" type="application/rss+xml" /> <language>en-us</language> <pubDate>Sun, 28 Sep 2025 21:16:31 -0300</pubDate> <item> <title>why common lisp became my favorite</title> <link>/posts/why-common-lisp-became-my-favorite.html</link> <pubDate>2025-09-27 21:28:15</pubDate> <author>jean0t</author> <guid isPermaLink="true">/posts/why-common-lisp-became-my-favorite.html</guid> <category><![CDATA[ common lisp ]]></category><category><![CDATA[ programming ]]></category> <description><![CDATA[ <p>I came from a background of python/golang programming, my first contact with programming was with python, then I studied C to get to know systems programming and understand better about memory with pointers... golang was kind of my favorite language during a lot of time, because it was a simple and direct syntax with some built in niceties like map or slices (which in C must be done manually).  </p>

<p>However after some time I got kinda bored, the tools were amazing but I didn't feel the ecstasy of exploring new features or syntax, I had heard about lisp before, although I disregarded it because I thought it was esoteric (which was synonym of uselessly complex and hard) to do things.  </p>

<p>Some hours with it proved me how wrong I was...  </p>

<h4>Why it is so good?</h4>

<p>As previously menitoned, I like simple and direct languages, but I also love to explore new syntaxes and ways of working. Lisp is a definition, which means a lot of 'dialects' of it exist, each with its functins, modules and uses.<br/>
However that is one of its best features and how it shiny: the previsibility and stability. Its syntax is the same, no matter the dialect you will always have the basic:<br/>
<code>
(function arg1 arg2 ... argN)
</code>  </p>

<p>What will change is the underlying implementation, like being case sensitive or separating the namespace of functions and arguments.<br/>
Another aspect that made me think it is magical is it pragmaticality, its debug is powerful, we can change variables and functions while it is <strong>still</strong> executing!!!<br/>
Related to this interactive debug comes the fact lisp is interpreted, but forget your concept about slow languages like python/ruby or memory eater like javascript, Lisp is fast, lightweight and offers compilation, sometimes native compilation binary depending on the lisp implementation you are using.<br/>
Famous versions of lisp are: emacs lisp, lisp flavored erlang, clojure, common lisp, scheme, guile, etc.  </p>

<p>And I didn't even mentioned the powerful system of macros that can literally implement new paradigms to the language.</p>

<h5>Common lisp is reliable, powerful, fast, dynamic, customizable and multiple. Just choose the version you love and dive in.</h5>
 ]]></description> </item> </channel> </rss>